# <--------- Spring 애플리케이션 이름 설정  ----------> #
spring.application.name=MainProject


# <--------- MySQL 데이터소스 설정 ----------> #
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/main_project?rewriteBatchedStatements=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
spring.datasource.username=root
spring.datasource.password=tiger


# <--------- HikariCP 커넥션 풀 설정 (성능 최적화 목적) ----------> #
# 최대 커넥션 풀 크기
spring.datasource.hikari.maximum-pool-size=30
# 최소 유휴 커넥션 수
spring.datasource.hikari.minimum-idle=5
# 유휴 커넥션 최대 유지 시간 (ms)
spring.datasource.hikari.idle-timeout=600000
# 커넥션 획득 최대 대기 시간 (ms)
spring.datasource.hikari.connection-timeout=60000
# 자동 커밋 설정 여부
spring.datasource.hikari.auto-commit=true


# <--------- JPA 설정 (DDL 자동 업데이트 및 배치 처리) ----------> #
# 애플리케이션 실행 시 DB 스키마 자동 업데이트
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# SQL 포맷팅 활성화
spring.jpa.properties.hibernate.format_sql=true
# SQL 로그 출력 여부 (false로 설정해 성능 최적화)
spring.jpa.show-sql=false
# JDBC 배치 처리 사이즈 설정
spring.jpa.properties.hibernate.jdbc.batch_size=2000
# INSERT 쿼리 순서 정렬 (성능 향상)
spring.jpa.properties.hibernate.order_inserts=true
# UPDATE 쿼리 순서 정렬 (성능 향상)
spring.jpa.properties.hibernate.order_updates=true


# <--------- 로깅 레벨 설정 (Hibernate SQL 및 바인딩 관련) ----------> #
# TRACE > DEBUG > INFO > WARN > ERROR > FATAL

# 내가 쓴 코드 로그는 모두 info 이상 출력
logging.level.edu.pnu.service=INFO

# Hibernate SQL 로그는 경고 이상만 출력
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.orm.jdbc.bind=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# 스프링 시큐리티, 웹, 기타 라이브러리는 경고 이상만
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springdoc=WARN



# <--------- 멀티파트 업로드 파일 크기 제한 설정 (최대 200MB) ----------> #
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=200MB


# <--------- 톰캣 최대 HTTP POST 요청 크기 (대용량 파일 업로드 대응) ----------> #
server.tomcat.max-http-form-post-size=210000000


# <--------- 세션 타임아웃 (서버가 클라이언트 세션을 유지하는 최대 시간) ----------> #
# 10초로 설정 (필요 시 조정)
server.servlet.session.timeout=10s


# <--------- 톰캣 커넥션 타임아웃 설정 (HTTP 연결 대기 시간) ----------> #
# 10초로 설정
server.tomcat.connection-timeout=10s


# <--------- DataShareService 커스텀 설정 ----------> #
# 한 번에 AI 서버에 전송할 배치 데이터 크기
datashare.batch-size=10

# 데이터 전송 실패 시 최대 재시도 횟수
datashare.retry-max-attempts=2

# 재시도 전 대기 시간 (밀리초 단위)
datashare.retry-delay-ms=1000

# 배치 간 전송 딜레이 (밀리초 단위)
datashare.batch-delay-ms=150

# RestTemplate 연결 타임아웃 설정 (밀리초 단위)
datashare.rest-connect-timeout=10000

# RestTemplate 읽기 응답 타임아웃 설정 (밀리초 단위)
datashare.rest-read-timeout=15000

# AI 서버 API 기본 URL
datashare.ai-api-url=http://10.125.121.177:8000/api/manager/export-and-analyze-async





# 로그 파일 설정
logging.file.name=logs/application.txt

# 로그 출력 패턴
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - %msg%n

# 특정 패키지만 더 자세한 로그
logging.level.edu.pnu.service.csv=TRACE
logging.level.edu.pnu.service.datashare=TRACE
logging.level.edu.pnu.batch=TRACE

# SQL 로그도 보고 싶다면
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE
